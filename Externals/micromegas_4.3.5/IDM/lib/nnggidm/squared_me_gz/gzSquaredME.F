*#define CHECK

#if 0
* SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 8.0 on 19-Apr-2016 22:32
#endif

#include "vars.h"

************************************************************************

	RealType function gzsumup(CCloop, CCtree)
	implicit none

#include "vars.h"

	ComplexType CCloop(1), CCtree(1)
	ComplexType m

	gzsumup = 0

	m = 0
	m = m + CCloop(1)*1
	gzsumup = gzsumup + Re(Conjugate(CCtree(1))*m)
	end

************************************************************************

	subroutine gzSquaredMEHel(result, flags)
	implicit none
	RealType result(*)
	integer flags

#include "vars.h"

	RealType gzsumup
	external gzsumup
        flags=3
* BEGIN ABBR_HEL
	TEST(flags, BIT_LOOP)
	call gzabbr1h
	ENDTEST(flags, BIT_LOOP)
* END ABBR_HEL

* BEGIN FF_INI
	Cloop(1) = 0
* END FF_INI
        
	TEST(flags, BIT_LOOP)
* BEGIN FF_LOOP
	call gzvert
	call gzbox

	result(2) = result(2) + gzsumup(Cloop, Cloop)
* END FF_LOOP
	ENDTEST(flags, BIT_LOOP)
	end

************************************************************************

	subroutine gzSquaredME(result, helicities, flags)
	implicit none
	RealType result(*)
	integer*8 helicities
	integer flags

#include "vars.h"

* BEGIN VARDECL
	external gzSquaredMEHel

	integer Hel1, Hel2, Hel3, Hel4
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)
	equivalence (Hel(4), Hel4)

* END VARDECL

#include "inline.h"
        flags=3
	PREP(bhel,ehel, vec,vec_end, b0a,e0a, b0s,e0s)

* BEGIN INVARIANTS
	S = SInvariant(k(1),k(2))
	T = TInvariant(k(1),k(3))
	U = TInvariant(k(2),k(3))
* END INVARIANTS

	TEST(flags, BIT_RESET)
* BEGIN ABBR_S
	seq(1) = seq(1) + 1
	INI_S(seq)
	TEST(flags, BIT_LOOP)
	call gzabbr1s
	ENDTEST(flags, BIT_LOOP)
* END ABBR_S
	ENDTEST(flags, BIT_RESET)

* BEGIN ABBR_ANGLE
	seq(2) = seq(2) + 1
	INI_ANGLE(seq)
	TEST(flags, BIT_LOOP)
	call gzabbr1a
	ENDTEST(flags, BIT_LOOP)
* END ABBR_ANGLE

* BEGIN RES_INI
	result(1) = 0
	result(2) = 0
* END RES_INI

* BEGIN HEL_LOOPS
	LOOP_HEL(Hel1)
	TEST(helicities, BIT_HEL(1))

	LOOP_HEL(Hel2)
	TEST(helicities, BIT_HEL(2))

	LOOP_HEL(Hel3)
	TEST(helicities, BIT_HEL(3))

	LOOP_HEL(Hel4)
	TEST(helicities, BIT_HEL(4))

	EXEC(gzSquaredMEHel, result, flags)

	ENDTEST(helicities, BIT_HEL(4))
	ENDLOOP_HEL(Hel4)

	ENDTEST(helicities, BIT_HEL(3))
	ENDLOOP_HEL(Hel3)

	ENDTEST(helicities, BIT_HEL(2))
	ENDLOOP_HEL(Hel2)

	ENDTEST(helicities, BIT_HEL(1))
	ENDLOOP_HEL(Hel1)
* END HEL_LOOPS

	SYNC(result)
	DEINI(seq)

#ifdef CHECK
	print *, 'S =', S
	print *, 'T =', T
	print *, 'U =', U
	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif

* END SQUAREDME
	end

